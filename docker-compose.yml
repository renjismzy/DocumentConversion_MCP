version: '3.8'

services:
  # Python Document Converter Server (HTTP)
  python-http-server:
    build:
      context: ./document-converter/server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - ./document-converter/server:/app
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TypeScript Document Converter Server (HTTP)
  typescript-http-server:
    build:
      context: ./document-converter/typescript-server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - HOST=0.0.0.0
    volumes:
      - ./document-converter/typescript-server:/app
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./document-converter/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - python-http-server
      - typescript-http-server
    networks:
      - mcp-network
    profiles:
      - load-balancer

  # Python Example Client
  python-client:
    build:
      context: ./python-example/client
      dockerfile: Dockerfile
    environment:
      - MCP_SERVER_URL=http://python-http-server:3000
    depends_on:
      - python-http-server
    networks:
      - mcp-network
    profiles:
      - examples

  # TypeScript Example Client
  typescript-client:
    build:
      context: ./typescript-example/client
      dockerfile: Dockerfile
    environment:
      - MCP_SERVER_URL=http://typescript-http-server:3001
    depends_on:
      - typescript-http-server
    networks:
      - mcp-network
    profiles:
      - examples

networks:
  mcp-network:
    driver: bridge

volumes:
  node_modules_ts_server:
  node_modules_ts_client:
  node_modules_ts_example_server:
  node_modules_ts_example_client: